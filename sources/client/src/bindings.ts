/* eslint-disable */
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

declare global {
    interface Window {
        __TAURI_INVOKE__<T>(cmd: string, args?: Record<string, unknown>): Promise<T>;
    }
}

// Function avoids 'window not defined' in SSR
const invoke = () => window.__TAURI_INVOKE__;

export function getFullProject(projectId: string) {
    return invoke()<FullProjectContract | null>("get_full_project", { projectId })
}

export function getListProjects() {
    return invoke()<ListProjectContract[]>("get_list_projects")
}

export function createProject(createContract: CreateProjectContract) {
    return invoke()<ListProjectContract>("create_project", { createContract })
}

export function updateProject(updateContract: UpdateProjectContract) {
    return invoke()<Project>("update_project", { updateContract })
}

export function deleteProject(projectId: string) {
    return invoke()<Project>("delete_project", { projectId })
}

export function createPlaceholder(createContract: CreatePlaceholderContract) {
    return invoke()<Placeholder>("create_placeholder", { createContract })
}

export function updatePlaceholder(updateContract: UpdatePlaceholderContract) {
    return invoke()<Placeholder>("update_placeholder", { updateContract })
}

export function deletePlaceholder(placeholderId: string) {
    return invoke()<Placeholder>("delete_placeholder", { placeholderId })
}

export function getTaskSets(projectId: string) {
    return invoke()<TaskSet[]>("get_task_sets", { projectId })
}

export function createTaskSet(createContract: CreateTaskSetContract) {
    return invoke()<FullTaskSetContract>("create_task_set", { createContract })
}

export function updateTaskSet(updateContract: UpdateTaskSetContract) {
    return invoke()<FullTaskSetContract>("update_task_set", { updateContract })
}

export function deleteTaskSet(taskSetId: string) {
    return invoke()<FullTaskSetContract>("delete_task_set", { taskSetId })
}

export function startTaskSet(taskSetId: string) {
    return invoke()<string>("start_task_set", { taskSetId })
}

export function createTask(createContract: CreateTaskContract) {
    return invoke()<Task>("create_task", { createContract })
}

export function updateTask(updateContract: UpdateTaskContract) {
    return invoke()<Task>("update_task", { updateContract })
}

export function deleteTask(taskId: string) {
    return invoke()<Task>("delete_task", { taskId })
}

export type UpdateProjectContract = { id: string; name: string }
export type CreateProjectContract = { name: string }
export type FullProjectContract = { id: string; name: string; created_at: string; updated_at: string; placeholders: Placeholder[]; task_sets: { id: string; order: number; name: string; description: string; project_id: string; tasks: Task[] }[] }
export type Project = { id: string; name: string; created_at: string; updated_at: string }
export type TaskSet = { id: string; order: number; name: string; description: string; project_id: string }
export type CreatePlaceholderContract = { name: string; value: string; project_id: string }
export type ListProjectContract = { id: string; name: string }
export type CreateTaskContract = { order: number; command: string; working_directory: string; delay: number; task_set_id: string }
export type FullTaskSetContract = { id: string; order: number; name: string; description: string; project_id: string; tasks: Task[] }
export type UpdateTaskContract = { id: string; command: string; working_directory: string; delay: number }
export type UpdateTaskSetContract = { id: string; description: string }
export type UpdatePlaceholderContract = { id: string; value: string }
export type Task = { id: string; order: number; command: string; working_directory: string; delay: number; task_set_id: string }
export type CreateTaskSetContract = { project_id: string; order: number; name: string; description: string }
export type Placeholder = { id: string; name: string; value: string; project_id: string }
