
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async initializeSetting(initContract: InitializeSettingContract) : Promise<Result<SettingContract, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("initialize_setting", { initContract }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getSetting() : Promise<Result<SettingContract | null, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_setting") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async updateSetting(updateContract: UpdateSettingContract) : Promise<Result<null, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("update_setting", { updateContract }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async createProject(createProjectContract: CreateProjectContract) : Promise<Result<ProjectContract, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("create_project", { createProjectContract }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getAllProjects() : Promise<Result<ProjectContract[], Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_all_projects") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getLastOpenedProjectId() : Promise<Result<string | null, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_last_opened_project_id") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async openProject(id: string) : Promise<Result<ProjectContract, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("open_project", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async ptySpawn(spawnContract: SpawnPtyContract) : Promise<Result<string, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("pty_spawn", { spawnContract }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async ptyWrite(sessionId: string, data: string) : Promise<Result<null, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("pty_write", { sessionId, data }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async ptyRead(sessionId: string) : Promise<Result<string, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("pty_read", { sessionId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async ptyResize(sessionId: string, resizeContract: ResizePtyContract) : Promise<Result<null, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("pty_resize", { sessionId, resizeContract }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async ptyKill(sessionId: string) : Promise<Result<null, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("pty_kill", { sessionId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async ptyExitstatus(sessionId: string) : Promise<Result<number, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("pty_exitstatus", { sessionId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type CreateProjectContract = { name: string }
export type Error = "Db" | "AlreadyExists" | "NotExists" | "Failed"
export type InitializeSettingContract = { presentationLanguage: string; presentationTheme: string }
export type ProjectContract = { id: string; name: string; dateCreated: string; dateLastOpened: string }
export type ResizePtyContract = { cols: number; rows: number }
export type SettingContract = { id: string; metaDateUpdated: string; presentationLanguage: string; presentationTheme: string }
export type SpawnPtyContract = { cols: number; rows: number }
export type UpdateSettingContract = { id: string; presentationLanguage: string; presentationTheme: string }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
