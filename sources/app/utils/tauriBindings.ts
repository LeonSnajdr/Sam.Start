
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async settingInitialize(initializeContract: SettingInitializeContract) : Promise<Result<SettingContract, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("setting_initialize", { initializeContract }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async settingGetDefault() : Promise<Result<SettingContract | null, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("setting_get_default") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async settingUpdateOne(updateContract: SettingUpdateContract) : Promise<Result<null, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("setting_update_one", { updateContract }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async projectCreate(projectCreateContract: ProjectCreateContract) : Promise<Result<ProjectContract, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("project_create", { projectCreateContract }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async projectGetAll() : Promise<Result<ProjectContract[], Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("project_get_all") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async projectGetIdLastOpened() : Promise<Result<string | null, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("project_get_id_last_opened") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async projectOpen(id: string) : Promise<Result<ProjectContract, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("project_open", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async ptySessionSpawn(spawnContract: PtySessionSpawnContract) : Promise<Result<string, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("pty_session_spawn", { spawnContract }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async ptySessionWrite(sessionId: string, data: string) : Promise<Result<null, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("pty_session_write", { sessionId, data }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async ptySessionGetReadHistory(sessionId: string) : Promise<Result<string, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("pty_session_get_read_history", { sessionId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async ptySessionInfoGetAll(projectId: string) : Promise<Result<PtySessionInfoContract[], Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("pty_session_info_get_all", { projectId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async ptySessionResize(sessionId: string, resizeContract: PtySessionResizeContract) : Promise<Result<null, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("pty_session_resize", { sessionId, resizeContract }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async ptySessionKill(sessionId: string) : Promise<Result<null, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("pty_session_kill", { sessionId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async ptySessionGetExitstatus(sessionId: string) : Promise<Result<number, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("pty_session_get_exitstatus", { sessionId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async placeholderCreate(placeholderCreateContract: PlaceholderCreateContract) : Promise<Result<PlaceholderContract, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("placeholder_create", { placeholderCreateContract }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async placeholderGetAllGlobal() : Promise<Result<PlaceholderContract[], Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("placeholder_get_all_global") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async placeholderGetAllProject(projectId: string | null) : Promise<Result<PlaceholderContract[], Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("placeholder_get_all_project", { projectId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async placeholderGetOne(id: string) : Promise<Result<PlaceholderContract, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("placeholder_get_one", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async placeholderUpdateOne(id: string, placeholderUpdateContract: PlaceholderUpdateContract) : Promise<Result<null, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("placeholder_update_one", { id, placeholderUpdateContract }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async placeholderDeleteOne(id: string) : Promise<Result<null, Error>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("placeholder_delete_one", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/


export const events = __makeEvents__<{
ptySessionKilledEvent: PtySessionKilledEvent,
ptySessionReadEvent: PtySessionReadEvent,
ptySessionSpawnedEvent: PtySessionSpawnedEvent
}>({
ptySessionKilledEvent: "pty-session-killed-event",
ptySessionReadEvent: "pty-session-read-event",
ptySessionSpawnedEvent: "pty-session-spawned-event"
})

/** user-defined constants **/



/** user-defined types **/

export type Error = "Db" | "AlreadyExists" | "NotExists" | "Failed"
export type PlaceholderContract = { id: string; projectId: string | null; name: string; value: string; dateCreated: string; dateLastUpdated: string }
export type PlaceholderCreateContract = { projectId: string | null; name: string; value: string }
export type PlaceholderUpdateContract = { projectId: string | null; name: string; value: string }
export type ProjectContract = { id: string; name: string; dateCreated: string; dateLastOpened: string }
export type ProjectCreateContract = { name: string }
export type PtySessionInfoContract = { sessionId: string; projectId: string; name: string }
export type PtySessionKilledEvent = string
export type PtySessionReadEvent = PtySessionReadEventData
export type PtySessionReadEventData = { sessionId: string; data: string }
export type PtySessionResizeContract = { cols: number; rows: number }
export type PtySessionSpawnContract = { projectId: string; taskSetId: string | null; name: string | null; workingDirectory: string | null; command: string | null; noExit: boolean }
export type PtySessionSpawnedEvent = string
export type SettingContract = { id: string; metaDateUpdated: string; presentationLanguage: string; presentationTheme: string }
export type SettingInitializeContract = { presentationLanguage: string; presentationTheme: string }
export type SettingUpdateContract = { id: string; presentationLanguage: string; presentationTheme: string }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
